# Generated by Django 5.0.6 on 2024-05-29 22:49

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('bank_name', models.CharField(choices=[('Select Your Bank', 'Select Your Bank'), ('Access Bank Plc', 'Access Bank Plc'), ('Fidelity Bank Plc', 'Fidelity Bank Plc'), ('First City Monument Bank Limited', 'First City Monument Bank Limited'), ('First Bank of Nigeria Limited', 'First Bank of Nigeria Limited'), ('Guaranty Trust Holding Company Plc', 'Guaranty Trust Holding Company Plc'), ('Union Bank of Nigeria Plc', 'Union Bank of Nigeria Plc'), ('United Bank for Africa Plc', 'United Bank for Africa Plc'), ('Zenith Bank Plc', 'Zenith Bank Plc'), ('Citibank Nigeria Limited', 'Citibank Nigeria Limited'), ('Ecobank Nigeria', 'Ecobank Nigeria'), ('Heritage Bank Plc', 'Heritage Bank Plc'), ('Keystone Bank Limited', 'Keystone Bank Limited'), ('Optimus Bank Limited', 'Optimus Bank Limited'), ('Polaris Bank Limited', 'Polaris Bank Limited'), ('Stanbic IBTC Bank Plc', 'Stanbic IBTC Bank Plc'), ('Standard Chartered', 'Standard Chartered'), ('Sterling Bank Plc', 'Sterling Bank Plc'), ('Titan Trust Bank', 'Titan Trust Bank'), ('Unity Bank Plc', 'Unity Bank Plc'), ('Wema Bank Plc', 'Wema Bank Plc')], max_length=50)),
                ('account_number', models.CharField(blank=True, max_length=10, null=True)),
                ('account_name', models.CharField(blank=True, max_length=40, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Otptoken',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('otp_code', models.CharField(default='34f7c9', max_length=6)),
                ('otp_created_at', models.DateTimeField(auto_now_add=True)),
                ('otp_expires_at', models.DateTimeField(blank=True, null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='otps', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Post_pdf',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pdf_name', models.CharField(max_length=50)),
                ('pdf_file', models.FileField(upload_to='pdfs/')),
                ('posted_on', models.DateTimeField(auto_now_add=True, null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['posted_on'],
            },
        ),
        migrations.CreateModel(
            name='UserAmount',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.IntegerField(blank=True, null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='amnt', to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
